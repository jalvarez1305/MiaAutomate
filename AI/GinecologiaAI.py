import json
import os
from openai import OpenAI
from OpenIAHelper import obtener_ultimos_mensajes_usuario
from Pinecone_Helper import get_context


client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
gpt_model= "gpt-4o"

def ResolverPadecimiento(ConvMessages):
  # Obtener el contexto adicional de Pinecone (o cualquier otra fuente que uses)
  mensajes_usuario = obtener_ultimos_mensajes_usuario(ConvMessages)
  user_question = "\n".join([msg["contenido"] for msg in mensajes_usuario])
  texto = json.dumps(user_question)
  context = get_context(texto)
  all_mesg=[
            {"role": "system", "content": f"Contexto adicional: {context}"},
            {"role": "system", "content": """Eres un medico que porporciona una breve atencion a padecimientos medicos, no proporcionas tratamiento
                                            unicamente le haces saber que conoces su padecimiento y por que es importante que le de tratamiento"""},
            {"role": "system", "content": """tus respuestas deben venir exclusivamente del contexto para que tus respuestas se parezcan a como assitant ha respondido a conversaciones anteriores"""},
            {"role": "system", "content": """El flujo debe ser el siguiente:
                                            El usuario contacta.
                                            Le preguntamos si es una revisi√≥n general o si tiene un padecimiento espec√≠fico.
                                            Nos proporciona el padecimiento.
                                            Buscamos en el contexto de conversaciones anteriores c√≥mo se puede atender el padecimiento.
                                            Le respondemos del padecimiento.
                                            Si tiene m√°s dudas del padecimiento, le respondemos con el contexto.                        
                                            Si puedes proporcionar posibles causas, pero no puedes ofrecer tratamientos
                                            No finalices preguntando dudas
                                            No digas consulta a tu medico, habla siempre en primera primersona
                                            Se amable, le hablas a mujeres e incluye 1 o dos emojis
                                            Estas hablando por whatsapp, se brebre y usa el formato apropiado
                                            Se breve
                                            Si la pregunta es sobre 'Menopausia','Premenopausia','Perimenopausia' responde este texto extacto 'Dame un segundito para platicarte de las opciones que manejamos, por favor üôå'
                                            Si el contexto no tiene la informacion ue necesitas, responde este texto exacto 'Dame un segundito para darte la informacion precisa, por favor'"""}
        ]+ConvMessages
  response = client.responses.create(
      model=gpt_model,
      input=all_mesg,
      temperature=0  # Ajustar la temperatura a 0.1
  )
  return response.output_text

def ghosted_clasification(ConvMessages):
    """
    :param conversacion: Lista de mensajes en orden cronol√≥gico. 
                         Cada mensaje es un dict: {'rol': 'usuario'|'agente', 'contenido': str}
    :return: Una string con la categor√≠a
    """
    saludo="""Cu√©ntame un poquito m√°s ‚ú® ¬øTienes alg√∫n tema en especial que te gustar√≠a revisar en la consulta ü©∫üíñ o ya te toca tu revisi√≥n ginecol√≥gica anual? üìÖüå∏"""
    remate ="""Sigo a tus √≥rdenes si tienes alguna otra duda o deseas agendar tu cita ‚ò∫Ô∏è"""
    reglas = f"""
              Clasifica la conversaci√≥n en una (y solo una) de las siguientes categor√≠as. Eval√∫a en este orden estricto:

              Ghosted A

              El √∫ltimo mensaje es nuestro (del agente).

              Los mensajes que comienzan con 'Categor√≠a:' deben ignorarse.

              Despu√©s de enviar el mensaje '{saludo}', el usuario no respondi√≥ absolutamente nada (ni monosil√°bicos).

              El '{saludo}' se ha enviado una sola vez.

              Ghosted B

              El √∫ltimo mensaje es nuestro (del agente).

              Los mensajes que comienzan con 'Categor√≠a:' deben ignorarse.

              Se envi√≥ el mensaje '{saludo}'.

              No se ha enviado el mensaje '{remate}'

              El usuario respondi√≥ al menos dos mensajes.

              Despu√©s de esas respuestas, el agente hizo una pregunta directa (ej: "¬øTe queda bien?", "¬øDeseas agendar?") o un ofrecimiento significativo (ej: mand√≥ precios, ofreci√≥ horarios, describi√≥ un servicio).

              Si despu√©s de este ofrecimiento o pregunta, el usuario no contest√≥, se considera que nos dej√≥ en visto.

              Otro

              Cualquier conversaci√≥n que no encaje en las anteriores.

              Notas:

              "Ofrecimiento significativo" incluye mandar precios, horarios, descripci√≥n de consulta, o cualquier propuesta directa relacionada con la cita.

              No es necesario que el ofrecimiento sea una pregunta expl√≠cita.

              Responde √∫nicamente con el nombre de la categor√≠a.

              """
    

    response = client.responses.create(
        model=gpt_model,
        input=[
            {"role": "system", "content": "Eres un m√©dico que clasifica conversaciones m√©dicas seg√∫n reglas estrictas."},
            {"role": "user", "content": reglas},
            {"role": "user", "content": f"""Ahora clasifica esta conversacion: {ConvMessages}"""}
        ],
        temperature=0  # Ajustar la temperatura a 0.1
    )
    
    return response.output_text

